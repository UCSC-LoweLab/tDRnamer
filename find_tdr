#!/usr/bin/perl -w
# find_tdr
# Find tDRs in database by names

use strict;
use Getopt::Long;

our ($opt_names, $opt_db, $opt_fasta, $opt_genomes, $opt_help);
our $flanking = 100;

our @sprinzl_pos = ('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16',
				'17','17a','18','19','20','20a','20b','21','22','23','24','25',
				'26','27','28','29','30','31','32','33','34','35','36','37','38',
				'39','40','41','42','43','44','45',
				'e11','e12','e13','e14','e15','e16','e17',
				'e1','e2','e3','e4','e5',
				'e27','e26','e25','e24','e23','e22','e21',
				'46','47','48','49','50','51','52','53','54','55','56','57','58',
				'59','60','61','62','63','64','65','66','67','68','69','70','71',
				'72','73','74','75','76');

&set_options();
my $genome = undef;
if ($opt_genomes ne "")
{
	my $genomes = &read_genome_info();
	$genome = &get_genome($genomes);
}
my $pre_tRNA_seqs = &get_pre_tRNA_seqs();
my ($pre_tRNA_consensus, $tRNA_consensus) = &get_consensus_alignments();
my ($pre_tRNA_sprinzl_pos, $tRNA_sprinzl_pos) = &get_sprinzl_pos($pre_tRNA_consensus, $tRNA_consensus);
&parse_tDR_names($genome, $pre_tRNA_seqs, $pre_tRNA_sprinzl_pos, $tRNA_sprinzl_pos);

exit;


sub set_options
{
	$opt_fasta = '';
	$opt_names = "";
	$opt_db = "";
	$opt_genomes = "";
	
	Getopt::Long::GetOptions("fasta=s", "db=s", "names=s", "genomes=s", "help|h");
	
	if ($opt_help || $opt_fasta eq "" || $opt_names eq "" || $opt_db eq "")
	{
		die "Usage: find_tdr [options] > <log file>\n",
			"Options\n",
			"--names=<file name>         File containing tDR names\n",
			"--db=<db name>              tDR database with location\n",
			"--fasta=<file name>         Output fasta file of tDRs\n",
			"--genomes=<file name>       Tab-delimited genome info file (optional)\n",
			"--help -h                   Print this help\n\n";
	}
}

sub get_genome
{
	my ($genomes) = @_;
	my $genome = undef;
	my $db = substr($opt_db, rindex($opt_db, "/")+1);
	my $index = &bsearch_genome($db, $genomes);
	if ($index > -1)
	{
		$genome = $genomes->[$index];
		print "Found genome ".$genome->[0]."\n";
	}
	return $genome;
}

sub parse_tDR_names
{
	my ($genome, $pre_tRNA_seqs, $pre_tRNA_sprinzl_pos, $tRNA_sprinzl_pos) = @_;
	
	my $line = "";
	
	print "Parsing input tDR names ".$opt_names."\n";
	open(FILE_IN, "$opt_names") or die "Fail to open $opt_names\n";
	open(FILE_OUT, ">$opt_fasta") or die "Fail to open $opt_fasta\n";
	while ($line = <FILE_IN>)
	{
		chomp($line);
		my $name = &trim($line);
		my $alignment = "";
		my $seq = "";
		my $orig_tDR = "";
		my $tDR = "";
		if ($name ne "")
		{
			my ($name_struct, $invalid) = &get_name_struct($name, $genome);
			if ($invalid)
			{
				print "Error: $name have invalid tDR name format.\n";
			}
			else
			{
				($alignment, $seq) = &get_tRNA_sequence($name_struct, $pre_tRNA_seqs);
			}
			
			if ($alignment ne "")
			{
				if ($name_struct->{type} eq "pre-tRNA" and $seq eq "")
				{
					print "Error: Source pre-tRNA sequence for $name cannot be found.\n";
				}
				else
				{
					$orig_tDR = &retrieve_tDR($name_struct, $alignment, $seq, $pre_tRNA_sprinzl_pos, $tRNA_sprinzl_pos);
					if ($orig_tDR eq "")
					{
						print "Error: tDR sequence for $name cannot be retrieved from source tRNA. Possible incorrect tDR positions are included in tDR name.\n";
					}
					else
					{
						if (defined $name_struct->{change})
						{
							$tDR = &add_changes($name_struct, $orig_tDR);
							if ($tDR eq "")
							{
								print "Error: Fail to include mismatches/indels for $name. Possible incorrect values are included in tDR name.\n";
							}
						}
						else
						{
							$tDR = $orig_tDR;
						}
					}
				}
			}
			else
			{
				print "Error: Source tRNA sequence for $name cannot be found.\n";
			}
			
			if ($tDR ne "")
			{
				print FILE_OUT ">".$name."\n";
				print FILE_OUT uc($tDR)."\n";
			}			
		}		
	}
	close(FILE_IN);
	close(FILE_OUT);
}

sub trim
{
	my ($value) = @_;
	$value =~ s/\ //g;
	return $value;
}

sub get_name_struct
{
	my ($name, $genome) = @_;
	my %name_struct = ();
	my $invalid = 0;
	
	my @parts = split(/\-/, $name);	
	my ($start, $end) = split(/\:/, $parts[1]);
	$name_struct{start} = $start;
	$name_struct{end} = $end;
	if (uc(substr($start, 0, 1)) eq "L" or uc(substr($start, 0, 1)) eq "T" or
		uc(substr($end, 0, 1)) eq "L" or uc(substr($end, 0, 1)) eq "T")
	{
		$name_struct{type} = "pre-tRNA";
	}
	else
	{
		$name_struct{type} = "tRNA";
	}
	$name_struct{isotype} = uc($parts[2]);
	if ($name_struct{isotype} eq "HIS" and $name_struct{start} eq "L1")
	{
		$name_struct{type} = "tRNA";
	}
	
	$name_struct{anticodon} = uc($parts[3]);
	$name_struct{transcript_num} = $parts[4];
	$name_struct{prefix} = "tRNA";
	if (uc($parts[3]) eq "NNN")
	{
		if ($name_struct{isotype} ne "UND")
		{
			$name_struct{prefix} = "tRX";
		}
		else
		{
			if (defined $genome)
			{
				if (index($genome->[4], "Fungi") == -1 and index($genome->[4], "Bacteria") == -1 and index($genome->[4], "Archaea") == -1 and
					$genome->[1] ne "Amell4.5" and $genome->[1] ne "Lmajo2" and $genome->[1] ne "Pfalc2" and $genome->[1] ne "Hsapi19" 
					and $genome->[1] ne "Hsapi38" and $genome->[1] ne "Dreri11")
				{
					$name_struct{prefix} = "tRX";
				}
				else
				{
					$name_struct{prefix} = "tRNA";
				}
			}
			else
			{
				$name_struct{prefix} = "tRNA";
			}
		}
	}
	my $ct = 5;
	if (defined $parts[5] and $parts[5] =~ /^\d+$/)
	{
		$name_struct{locus_num} = $parts[5];
		$ct = 6;
	}
	my $change = "";
	for (my $i = $ct; $i < scalar(@parts); $i++)
	{
		if (!$invalid)
		{
			if (uc($parts[$i]) =~ /^M(\d+)$/)
			{
				$name_struct{isodecoders} = $1;
			}
			elsif (uc($parts[$i]) =~ /^(I\d+[ACGTU]+)$/)
			{
				$change = $1;
				if (!defined $name_struct{change})
				{
					$name_struct{change} = [];
				}
				push(@{$name_struct{change}}, $change);
			}
			elsif (uc($parts[$i]) =~ /^(D\d+[ACGTU]+)$/)
			{
				$change = $1;
				if (!defined $name_struct{change})
				{
					$name_struct{change} = [];
				}
				push(@{$name_struct{change}}, $change);
			}
			elsif (uc($parts[$i]) =~ /^([ACGTU]+\d+[ACGTU]+)$/)
			{
				$change = $1;
				if (!defined $name_struct{change})
				{
					$name_struct{change} = [];
				}
				push(@{$name_struct{change}}, $change);
			}
			else
			{
				$invalid = 1;
			}
		}		
	}
	
	return (\%name_struct, $invalid);
}

sub get_tRNA_sequence
{
	my ($name_struct, $pre_tRNA_seqs) = @_;
	
	my $tRNA_name = $name_struct->{prefix}."-".$name_struct->{isotype}."-".$name_struct->{anticodon}."-".$name_struct->{transcript_num};
	my $stk_file = $opt_db;
	my $fa_file = "";
	
	if ($name_struct->{type} eq "pre-tRNA")
	{
		$tRNA_name .= "-".$name_struct->{locus_num};
		$stk_file .= "-trnaloci.stk";
	}
	else
	{
		$stk_file .= "-trnaconvert.stk";
	}
	
	my $cmd = "grep -i \"".$tRNA_name." \" ".$stk_file." | grep -v \"#=GR\"";
	my @lines = split(/\n/, `$cmd`);
	
	my $alignment = "";
	my $seq = "";
	if (scalar(@lines) > 0)
	{		
		for (my $i = 0; $i < scalar(@lines); $i++)
		{
			my $line = $lines[$i];
			chomp($line);
			if ($line =~ /^(\S+)\s+(.+)$/)
			{
				my $name = $1;
				my $temp = $2;
				if ($alignment eq "")
				{
					if ($name_struct->{type} eq "pre-tRNA")
					{
						my $idx = &bsearch_seq($name, $pre_tRNA_seqs);
						if ($idx > -1)
						{
							$seq = $pre_tRNA_seqs->[$idx]->[1];
						}
					}
				}
				$alignment .= $temp;
			}
		}
	}
	
	return ($alignment, $seq);
}

sub retrieve_tDR
{
	my ($name_struct, $alignment, $seq, $pre_tRNA_sprinzl_pos, $tRNA_sprinzl_pos) = @_;
	my $tDR = "";
	my $start_seq = 0;
	my $end_seq = 0;
	my $start_align = 0;
	my $end_align = 0;
	
	if ($name_struct->{type} eq "pre-tRNA")
	{		
		if ($name_struct->{start} =~ /^L(\d+)$/)
		{
			$start_seq = $flanking - $1;
			# tDR is in upstream flanking region only
			if ($name_struct->{end} =~ /^L(\d+)$/)
			{
				$end_seq = $flanking - $1;
				$tDR = substr($seq, $start_seq, $end_seq - $start_seq + 1);
			}
			elsif ($name_struct->{end} =~ /^T(\d+)$/)
			{
				$end_seq = length($seq) - $flanking + $1 - 1;
				$start_align = $pre_tRNA_sprinzl_pos->{'1'};
				$end_align = $pre_tRNA_sprinzl_pos->{'73'};
				$tDR = substr($seq, $start_seq, $flanking - 1 - $start_seq + 1);
				$tDR .= $alignment;
				$tDR .= substr($seq, length($seq) - $flanking, $end_seq - (length($seq) - $flanking) + 1);
				$tDR =~ s/\.//g;
			}
			else
			{
				$end_seq = $flanking - 1;
				$start_align = $pre_tRNA_sprinzl_pos->{'1'};
				if (defined $pre_tRNA_sprinzl_pos->{$name_struct->{end}})
				{
					$end_align = $pre_tRNA_sprinzl_pos->{$name_struct->{end}};
					$tDR = substr($seq, $start_seq, $end_seq - $start_seq + 1);
					$tDR .= substr($alignment, $start_align, $end_align - $start_align + 1);
					$tDR =~ s/\.//g;
				}
			}
		}
		elsif ($name_struct->{start} =~ /^T(\d+)$/)
		{
			$start_seq = length($seq) - $flanking + $1 - 1;
			# tDR is in downstream flanking region only
			if ($name_struct->{end} =~ /^T(\d+)$/)
			{
				$end_seq = length($seq) - $flanking + $1 - 1;
				$tDR = substr($seq, $start_seq, $end_seq - $start_seq + 1);
			}			
		}
		else
		{
			if (defined $pre_tRNA_sprinzl_pos->{$name_struct->{start}})
			{
				$start_align = $pre_tRNA_sprinzl_pos->{$name_struct->{start}};
				if ($name_struct->{end} =~ /^T(\d+)$/)
				{
					$end_seq = length($seq) - $flanking + $1 - 1;
					$end_align = $pre_tRNA_sprinzl_pos->{'73'};
					$tDR = substr($alignment, $start_align, $end_align - $start_align + 1);
					$tDR =~ s/\.//g;
					$tDR .= substr($seq, length($seq) - $flanking, $end_seq - (length($seq) - $flanking) + 1);					
				}
				elsif (defined $pre_tRNA_sprinzl_pos->{$name_struct->{end}})
				{
					$end_align = $pre_tRNA_sprinzl_pos->{$name_struct->{end}};
					$tDR = substr($alignment, $start_align, $end_align - $start_align + 1);
					$tDR =~ s/\.//g;
				}
			}
		}
	}
	else
	{
		if ($name_struct->{start} eq "L1" and $name_struct->{isotype} eq "HIS")
		{
			$start_align = $tRNA_sprinzl_pos->{'-1'};
		}
		else
		{
			$start_align = $tRNA_sprinzl_pos->{$name_struct->{start}};
		}
		$end_align = $tRNA_sprinzl_pos->{$name_struct->{end}};
		$tDR = substr($alignment, $start_align, $end_align - $start_align + 1);
		$tDR =~ s/\.//g;
	}
	
	$tDR =~ s/\-//g;
	return $tDR;
}

sub add_changes
{
	my ($name_struct, $tDR) = @_;
	
	my $change = "";
	my $pos = 0;
	my $base = "";
	my $orig = "";
	for (my $i = 0; $i < scalar(@{$name_struct->{change}}); $i++)
	{
		$change = $name_struct->{change}->[$i];
		$change =~ s/T/U/g;
		if ($change =~ /^I(\d+)([ACGTU]+)$/)
		{
			$pos = $1;
			$base = $2;
			if ($pos == length($tDR) + 1)
			{
				$tDR .= $base;
			}
			elsif ($pos == 1)
			{
				$tDR = $base.$tDR;
			}
			elsif ($pos > 1 and $pos <= length($tDR))
			{
				$tDR = substr($tDR, 0, $pos-1).$base.substr($tDR, $pos-1);
			}
			else
			{
				$tDR = "";
				last;
			}
		}
		elsif ($change =~ /^D(\d+)([ACGTU]+)$/)
		{
			$pos = $1;
			$base = $2;
			if (length($base) + $pos > length($tDR))
			{
				$tDR = "";
				last;
			}				
			elsif (substr($tDR, $pos, length($base)) eq $base)
			{
				if ($pos == length($tDR) - length($base))
				{
					$tDR = substr($tDR, 0, $pos - 1);
				}
				elsif ($pos == 1)
				{
					$tDR = substr($tDR, length($base));
				}
				elsif ($pos > 1 and $pos < length($tDR) - length($base))
				{
					$tDR = substr($tDR, 0, $pos).substr($tDR, $pos + length($base));
				}
				else
				{
					$tDR = "";
					last;
				}
			}
			else
			{
				$tDR = "";
				last;
			}
		}
		elsif ($change =~ /^([ACGTU]+)(\d+)([ACGTU]+)$/)
		{
			$orig = $1;
			$pos = $2;
			$base = $3;
			if (length($base) == length($orig))
			{
				if ($pos > 0 and $pos <= length($tDR) - length($base) + 1)
				{
					if (substr($tDR, $pos - 1, length($orig)) eq $orig)
					{
						if ($pos == 1)
						{
							$tDR = $base.substr($tDR, $pos + length($base) - 1);
						}
						elsif ($pos == length($tDR) - length($base) + 1)
						{
							$tDR = substr($tDR, 0, $pos - 1).$base;
						}
						else
						{
							$tDR = substr($tDR, 0, $pos - 1).$base.substr($tDR, $pos + length($base) - 1);
						}
					}
					else
					{
						$tDR = "";
						last;
					}	
				}
				else
				{
					$tDR = "";
					last;
				}					
			}
			else
			{
				$tDR = "";
				last;
			}				
		}
	}
	
	return $tDR;
}

sub get_sprinzl_pos
{
	my ($pre_tRNA_consensus, $tRNA_consensus) = @_;
	
	print "Get Sprinzl positions for consensus alignments\n";
	my $pre_tRNA_sprinzl_pos = &map_sprinzl_pos($pre_tRNA_consensus);
	my $tRNA_sprinzl_pos = &map_sprinzl_pos($tRNA_consensus);
	
	return ($pre_tRNA_sprinzl_pos, $tRNA_sprinzl_pos);
}

sub map_sprinzl_pos
{
	my ($consensus) = @_;
	my %map_pos = ();
	
	my $sprinzl_ct = -1;
	my $gap_ct = 0;
	my @positions = split(//, $consensus);
	for (my $i = 0; $i < scalar(@positions); $i++)
	{
		if ($positions[$i] ne "." and $positions[$i] ne "~")
		{
			if ($i == 0 and $positions[$i] eq ":")
			{
				$map_pos{'-1'} = $i;
			}
			else
			{
				$sprinzl_ct++;
				$map_pos{$sprinzl_pos[$sprinzl_ct]} = $i;
			}
			$gap_ct = 0;
		}
		else
		{
			$gap_ct++;
			$map_pos{$sprinzl_pos[$sprinzl_ct]."i".$gap_ct} = $i;
		}
	}
	return \%map_pos;
}

sub get_consensus_alignments
{
	my $pre_tRNA_stk_file = $opt_db."-trnaloci.stk";
	my $tRNA_stk_file = $opt_db."-trnaconvert.stk";
	
	print "Get consensus alignments\n";
	my $pre_tRNA_consensus = &get_consensus($pre_tRNA_stk_file);
	my $tRNA_consensus = &get_consensus($tRNA_stk_file);
	
	return ($pre_tRNA_consensus, $tRNA_consensus);
}

sub get_consensus
{
	my ($stk_file) = @_;
	
	my $alignment = "";
	my $cmd = "grep \"#=GC SS_cons\" ".$stk_file;
	my @lines = split(/\n/, `$cmd`);
	
	for (my $i = 0; $i < scalar(@lines); $i++)
	{
		my $line = $lines[$i];
		chomp($line);
		if ($line =~ /^\#\=GC SS_cons\s+(.+)$/)
		{
			$alignment .= $1;
		}
	}
	
	return $alignment;
}

sub get_pre_tRNA_seqs
{
	my $fa_file = $opt_db."-tRNAloci.fa";
	my $line = "";
	my $seq_name = "";
	my $seq = "";
	my @seqs = ();
	my $record = [];
	
	print "Reading pre-tRNAs sequence file ".$fa_file."\n";
	open(FILE_IN, "$fa_file") or die "Fail to open $fa_file\n";
	while ($line = <FILE_IN>)
	{
		chomp($line);
		if ($line =~ /^>(\S+)/)
		{
			my $temp = $1;
			if ($seq ne "")
			{
				$record = [];
				push(@$record, $seq_name);
				$seq =~ s/T/U/g;
				push(@$record, $seq);
				push(@seqs, $record);
			}			
			$seq_name = $temp;
			$seq = "";
		}
		else
		{
			$seq .= uc($line);
		}
	}
	if ($seq ne "")
	{
		$record = [];
		push(@$record, $seq_name);
		$seq =~ s/T/U/g;
		push(@$record, $seq);
		push(@seqs, $record);
	}			
	close(FILE_IN);
	
	my @sorted_seqs = sort {$a->[0] cmp $b->[0]} @seqs;
	return \@sorted_seqs;
}

sub bsearch_seq
{
    my ($x, $a) = @_;            
    my ($l, $u) = (0, scalar(@$a) - 1);  
    my $i;                       
    while ($l <= $u)
	{
		$i = int(($l + $u)/2);
		if (uc($a->[$i]->[0]) lt uc($x))
		{
		    $l = $i+1;
		}
		elsif (uc($a->[$i]->[0]) gt uc($x))
		{
		    $u = $i-1;
		} 
		else
		{
			return $i;
		}
    }
    return -1;         	
}

sub read_genome_info
{
	my @genomes = ();
	my $line = "";
	my $record = [];
	
	print "Reading genome info file ".$opt_genomes."\n";
	open(FILE_IN, "$opt_genomes") or die "Fail to open $opt_genomes\n";
	$line = <FILE_IN>;
	while ($line = <FILE_IN>)
	{
		chomp($line);
		$record = [];
		@$record = split(/\t/, $line);
		push(@genomes, $record);
	}
	close(FILE_IN);
	
	my @sorted_genomes = sort{$a->[2] cmp $b->[2]} @genomes;
	return \@sorted_genomes;
}

sub bsearch_genome
{
    my ($x, $a) = @_;            
    my ($l, $u) = (0, @$a - 1);  
    my $i;                       
    while ($l <= $u)
	{
		$i = int(($l + $u)/2);
		if ($a->[$i]->[2] lt $x)
		{
		    $l = $i+1;
		}
		elsif ($a->[$i]->[2] gt $x)
		{
		    $u = $i-1;
		} 
		else
		{
			return $i;
		}
    }
    return -1;         	
}
